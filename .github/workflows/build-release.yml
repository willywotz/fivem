name: Go Release

on:
  push:
    tags:
      - 'v[0-9]+.*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      - name: Get tag name
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: fyne prerequisites
        run: |
          # Install Fyne prerequisites
          sudo apt-get update
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev libxkbcommon-dev

      - name: Build and cross-compile binaries
        run: |
          # Define the application name. Replace 'your-app-name' with your actual binary name.
          APP_NAME="ishitani"
          # Define the output directory for compiled binaries
          BUILD_DIR="${GITHUB_WORKSPACE}/build"
          # Get the version from the Git tag
          VERSION=${{ steps.get_tag.outputs.TAG }}

          mkdir -p $BUILD_DIR

          # Define target platforms for cross-compilation
          PLATFORMS=(
            # "linux/amd64"
            # "linux/arm64"
            "windows/amd64"
            # "darwin/amd64"
            # "darwin/arm64" # For Apple Silicon Macs
          )

          # Loop through platforms and build
          for platform in "${PLATFORMS[@]}"; do
            GOOS=$(echo $platform | cut -d'/' -f1)
            GOARCH=$(echo $platform | cut -d'/' -f2)

            # Set output file extension based on OS
            if [ "$GOOS" == "windows" ]; then
              OUTPUT_NAME="${APP_NAME}_${GOOS}_${GOARCH}.exe"
            else
              OUTPUT_NAME="${APP_NAME}_${GOOS}_${GOARCH}"
            fi

            echo "Building for $GOOS/$GOARCH..."
            env GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags="-X 'main.Version=${VERSION}' -s -w" \
              -o "$BUILD_DIR/$OUTPUT_NAME" ./cmd/$APP_NAME # Adjust path to your main package if needed

            echo "Built $BUILD_DIR/$OUTPUT_NAME"
          done

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Sign Binary with Cosign
        run: |
          # Ensure the build directory exists
          BUILD_DIR="${GITHUB_WORKSPACE}/build"
          if [ ! -d "$BUILD_DIR" ]; then
            echo "Build directory does not exist: $BUILD_DIR"
            exit 1
          fi

          # Sign each binary in the build directory
          for file in $BUILD_DIR/*; do
            if [ -f "$file" ]; then
              echo "Signing $file..."
              cosign sign-blob "$file" --bundle cosign.bundle
            else
              echo "No files found in $BUILD_DIR to sign."
            fi
          done

      - name: Verify Cosign Signature
        run: |
          # Ensure the build directory exists
          BUILD_DIR="${GITHUB_WORKSPACE}/build"
          if [ ! -d "$BUILD_DIR" ]; then
            echo "Build directory does not exist: $BUILD_DIR"
            exit 1
          fi

          # Verify each binary in the build directory
          for file in $BUILD_DIR/*; do
            if [ -f "$file" ]; then
              echo "Verifying signature for $file..."
              cosign verify-blob "$file" --bundle cosign.bundle
            else
              echo "No files found in $BUILD_DIR to verify."
            fi
          done

      - name: Create GitHub Release and upload assets
        # Uses the official GitHub CLI to create a release and upload assets.
        # The GITHUB_TOKEN is automatically provided by GitHub Actions with sufficient permissions.
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          name: Release ${{ steps.get_tag.outputs.TAG }}
          # body_path: ${{ github.workspace }}/RELEASE_NOTES.md # Full path to release notes
          draft: false # Set to true if you want to review before publishing
          prerelease: ${{ contains(steps.get_tag.outputs.TAG, '-') }} # Auto-detect prereleases (e.g., v1.0.0-beta.1)
          files: |
            ${{ github.workspace }}/build/*
